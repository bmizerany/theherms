#!/usr/bin/env ruby
require 'eventmachine'
require 'fraggel'
require 'socket'

def proxies
  Thread.current[:proxies] ||= {}
end

module FraggelExt
  # Watch and Walk
  # This will return both opids in that order
  def waw(glob, &blk)
    [
      watch(glob, &blk),
      walk(glob) do |path, body, cas, err|
        # We don't care when WALK is over; we want the
        # two operations blend together.
        if err != :done
          blk.call(path, body, cas, err)
        end
      end
    ]
  end

  def id
    object_id.to_s
  end

end


module Proxy

  def self.create(host, port)
    EM.start_server("0.0.0.0", 0, self, host, port)
  end

  def initialize(host, port)
    @host, @port = host, port
  end

  def post_init
    p [:connection!, @host, @port]
    to = EM.connect(@host, @port)
    EM.enable_proxy(self, to)
    EM.enable_proxy(to, self)
  end

  def proxy_target_unbound
    p [:target_unbound, @host, @port]
  end

end

def addr(sid)
  port, ip = Socket.unpack_sockaddr_in(EM.get_sockname(sid))
  [ip, port].join(":")
end


EM.run do
  # In the near future, this will take mutilple address
  # for attempts to find a peer.
  c = Fraggel.connect 8041

  # Print exceptions
  EM.error_handler do |err|
    c.close_connection
    puts
    puts err.message+"  \n"+err.backtrace.join("  \n")
  end


  # Give Mama some sugar
  c.extend FraggelExt


  ## We will soon need to establish a session to lock things
  # c.session!


  ## Our Tree
  # NOTE: /lock isn't special in doozer yet, but we can still use it now.
  #       Doozer just won't release our locks if we die.
  # /
  #   lock/
  #     proc/
  #       <id>/
  #         owner=<session> # Where the backend lives
  #         proxy=<session> # Where the proxy lives
  #   proc/
  #     <id>/
  #       addr=<host:port>  # Where to bind to the backend
  #       proxy=<host:port> # Where to bind to the proxy
  #
  c.watch "/lock/proc/*/proxy" do |path, session, cas, err|
    p [:noticed, path, session]
    case true
    when err == :done
      # TODO: Do something (maybe close all proxies)
    when err != nil
      raise err
    when cas.del?
      pid = path.split("/")[2]
      if proxy = proxies.delete(pid)
        proxy.close_connection
      end

    when cas.set?
      # We are the ones who set it, ignore.
      if session != c.id

        # No one has a hold of this yet, let's try to get it.
        c.set path, c.id.to_s, cas do |cas, err|
          if err != nil
            # TODO: Do something
            raise err
          else
            pid = path.split("/")[3]
            p [:got, pid]

            c.get "/proc/"+pid+"/addr" do |addr, cas, err|

              if err != nil
                raise err
              else
                # TODO: no longer assume addr exists
                if cas != "0"
                  that  = pid
                  proxy = Proxy.create(*addr[0].split(":"))

                  c.set "/proc/"+that+"/proxy", addr(proxy), :clobber do |cas, err|
                    if err != nil
                      proxy.close_connection
                      raise err
                    else
                      proxies[that] = proxy
                    end
                  end
                else
                  puts that.to_s + " is missing addr"
                end
              end
            end
          end
        end
      end
    end
  end
end
